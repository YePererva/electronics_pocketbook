import os, sys, subprocess
import logging
import re
import platform

from local_repo import project_root_folder, content_folder, src_folder_postfix, target_folder_postfix


match platform.system():
	case 'Windows':
		kicad_cli = r'C:\Program Files\KiCad\9.0\bin\kicad-cli.exe'
		inkscape = r'C:\Program Files\Inkscape\bin\inkscape.exe'
	case 'Darwin':
		kicad_cli = r'/Applications/KiCad/KiCad.app/Contents/MacOS/kicad-cli'
		inkscape = r'/Applications/Inkscape.app/Contents/MacOS/inkscape'
	case 'Linux':
		kicad_cli = r'kicad-cli'
		inkscape = r'inkscape'

extensions = ['kicad_sch']

replacements = [
	# description tags 
    (r'<desc\s[^>]*>[\s\S]*?</desc>', ''),
    # definitions tags
    (r'<defs[^\n]*\n[^>]*?/>', ''),
    # template of title, generated by KiCAD
    (r'(<title\s+id="[^"]*">)(?:SVG Image created as )?(.*?)(?:\.svg.*?)</title>', r'\1\2</title>')
]

def kicad_to_svg(target_folder, src_file):
	subprocess.call([kicad_cli,'sch','export','svg','--output', target_folder,'--exclude-drawing-sheet', '--no-background-color', src_file])

def postprocess_svg (render_file_name):
	# cropping according to content without fields
	subprocess.call([inkscape,'--export-plain-svg','--export-text-to-path','--export-area-drawing','--export-background-opacity=255', '--export-overwrite', render_file_name])

	# replacing some identifiers to decrease the amount of diffs during git commits
	with open(render_file_name, 'r', encoding="utf-8") as file:
		svg_content = file.read()
		for replacement in replacements:
			svg_content = re.sub(replacement[0], replacement[1],  svg_content, flags = re.M)

	with open(render_file_name, 'w', encoding="utf-8") as file:
		# encoding is IMPORTANT if non-English symbols are involved
		file.write(svg_content)


if __name__ == "__main__":
	logger = logging.getLogger(__name__)
	logging.basicConfig(format='%(asctime)s %(message)s', level=logging.INFO)

	logger.info(f"Detected project root folder:\n\t{project_root_folder}")
	logger.info(f"Looking for KiCAD schematics in folder:\n\t{content_folder}")

	logger.info(f"Used source folder postfix:\n\t{src_folder_postfix}")
	logger.info(f"Used source target postfix:\n\t{target_folder_postfix}")

	for root, dirs, files in os.walk(content_folder):
		for file in files:
			if any(file.lower().endswith(extension.lower()) for extension in extensions):
				src_file = os.path.join(root, file)
				render_file_name = os.path.splitext(file)[0]+'.svg'

				target_folder = root.replace(src_folder_postfix, target_folder_postfix)
				render_file = os.path.join(target_folder, render_file_name)
				
				os.makedirs(target_folder, exist_ok=True)

				logger.info(f"Exporting schematics:\n\t{src_file}")
				kicad_to_svg(target_folder, src_file)
				logger.info(f"Post-processing file :\n\t{render_file}")
				postprocess_svg(render_file)




	

